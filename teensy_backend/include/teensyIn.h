//---------------------------------------------------------------------------------------------------------------------------------------
// Header file for TeensyIn class
//
// Author: Matteo Cartiglia <camatteo@ini.uzh.ch>
// Last updated: 15 JUL 2022 (Ciara Giles-Doran <gciara@student.ethz.ch>)
//---------------------------------------------------------------------------------------------------------------------------------------

#ifndef TEENSYIN_H
#define TEENSYIN_H

#include <Arduino.h>
#include "../include/datatypes.h"

class TeensyIn 
{
    // ------------------------------------------ Declaring class constructor and public methods ----------------------------------------

    public:

    //-----------------------------------------------------------------------------------------------------------------------------------
    // Class constructor; initialises the TeensyIn object and sets up the relevant pins on Teensy
    //-----------------------------------------------------------------------------------------------------------------------------------
    TeensyIn(const int inputReqPin, const int inputAckPin, int inputDataPins[], int inputNumDataPins, int inputDelay = 0, 
                bool inputActiveLow = false);

    //----------------------------------------------------------------------------------------------------------------------------------
    // dataRead: Executes REQ/ACK handshake and retrieves input from ALIVE
    //----------------------------------------------------------------------------------------------------------------------------------
    unsigned int dataRead();

    //----------------------------------------------------------------------------------------------------------------------------------
    // reqRead: Reads REQ pin state
    //----------------------------------------------------------------------------------------------------------------------------------    
    bool reqRead();

    //----------------------------------------------------------------------------------------------------------------------------------
    // ackWrite: Writes to ACK pin
    //----------------------------------------------------------------------------------------------------------------------------------
    void ackWrite(bool val);

    //----------------------------------------------------------------------------------------------------------------------------------
    // getBufferIndex: Retreives the current index of the buffer
    //----------------------------------------------------------------------------------------------------------------------------------
    int getBufferIndex();

    //----------------------------------------------------------------------------------------------------------------------------------
    // recordEvent: Records ALIVE output events as they occur
    //----------------------------------------------------------------------------------------------------------------------------------
    void recordEvent();

    //----------------------------------------------------------------------------------------------------------------------------------
    // sendEventBuffer: Sends ALIVE output data saved in buffer to Teensy
    //----------------------------------------------------------------------------------------------------------------------------------
    void sendEventBuffer();

    //----------------------------------------------------------------------------------------------------------------------------------
    // handshake: Executes REQ/ACK handshake between Teensy and ALIVE
    //----------------------------------------------------------------------------------------------------------------------------------
    void handshake();


    // ---------------------------------------------------- Declaring private methods --------------------------------------------------
    private:

    //----------------------------------------------------------------------------------------------------------------------------------
    // setupPins: Sets up the relevant pins for communication
    //----------------------------------------------------------------------------------------------------------------------------------
    void setupPins();

    //----------------------------------------------------------------------------------------------------------------------------------
    // getInputData: Retrieves input from ALIVE
    //----------------------------------------------------------------------------------------------------------------------------------
    unsigned int getInputData();

    //----------------------------------------------------------------------------------------------------------------------------------
    // resetBuffer: (Re)Initialises the ALIVE output buffer and (re)sets buffer index counter variable
    //----------------------------------------------------------------------------------------------------------------------------------
    void resetBuffer();


    // --------------------------------------------------- Declaring private variables -------------------------------------------------

    int _inputReqPin;
    int _inputAckPin;
    int* _inputDataPins;
    int _inputNumDataPins;
    int _inputDelay;
    bool _inputActiveLow;

    int _inputBufferIndex;
    outputALIVE _inputEventBuffer[MAX_PKT_BODY_LEN];
};

#endif